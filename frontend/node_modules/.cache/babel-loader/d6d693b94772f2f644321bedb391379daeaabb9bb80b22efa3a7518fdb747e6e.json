{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'OwnerDetails',\n  data() {\n    return {\n      owner: {},\n      // Initialize as empty object\n      landHoldings: [],\n      // Initialize as empty array\n      legalEntity: '',\n      netMineralAcres: '',\n      mineralOwnerRoyalty: '',\n      sectionName: '',\n      section: '',\n      township: '',\n      range: '',\n      titleSource: ''\n    };\n  },\n  async created() {\n    try {\n      const ownerId = this.$route.params.id;\n\n      // Fetch the owner details\n      const ownerResponse = await axios.get(`http://localhost:5001/api/owners/${ownerId}`, {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`\n        }\n      });\n      this.owner = ownerResponse.data;\n\n      // Fetch the land holdings for this owner\n      const holdingsResponse = await axios.get(`http://localhost:5001/api/landholdings?owner=${ownerId}`, {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`\n        }\n      });\n      this.landHoldings = holdingsResponse.data;\n    } catch (error) {\n      console.error('Failed to fetch owner or land holdings:', error);\n      this.$router.push('/dashboard');\n    }\n  },\n  methods: {\n    async createLandHolding() {\n      try {\n        const ownerId = this.$route.params.id;\n        const response = await axios.post('http://localhost:5001/api/landholdings', {\n          name: `${this.sectionName}-${this.legalEntity}`,\n          // Use a combination for name\n          owner: ownerId,\n          legalEntity: this.legalEntity,\n          netMineralAcres: this.netMineralAcres,\n          mineralOwnerRoyalty: this.mineralOwnerRoyalty,\n          sectionName: this.sectionName,\n          section: this.section,\n          township: this.township,\n          range: this.range,\n          titleSource: this.titleSource\n        }, {\n          headers: {\n            Authorization: `Bearer ${this.$store.state.token}`\n          }\n        });\n        this.landHoldings.push(response.data);\n        // Clear form fields after submission\n        this.legalEntity = '';\n        this.netMineralAcres = '';\n        this.mineralOwnerRoyalty = '';\n        this.sectionName = '';\n        this.section = '';\n        this.township = '';\n        this.range = '';\n        this.titleSource = '';\n      } catch (error) {\n        console.error('Failed to create land holding:', error);\n        alert('Failed to create land holding.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","owner","landHoldings","legalEntity","netMineralAcres","mineralOwnerRoyalty","sectionName","section","township","range","titleSource","created","ownerId","$route","params","id","ownerResponse","get","headers","Authorization","$store","state","token","holdingsResponse","error","console","$router","push","methods","createLandHolding","response","post","alert"],"sources":["src/views/OwnerDetails.vue"],"sourcesContent":["<template>\n  <div class=\"owner-details\">\n    <h2>{{ owner.ownerName }}</h2>\n    <p>Address: {{ owner.address }}</p>\n    <h3>Land Holdings</h3>\n    <ul>\n      <li v-for=\"holding in landHoldings\" :key=\"holding._id\">\n        <router-link :to=\" {name: 'landHoldingDetails' + holding._id\">{{ holding.name }}</router-link>\n        {{ holding.name }} ({{ holding.sectionName }})\n      </li>\n    </ul>\n    <form @submit.prevent=\"createLandHolding\">\n      <h3>Create New Land Holding</h3>\n      <div>\n        <label for=\"legalEntity\">Legal Entity:</label>\n        <input type=\"text\" v-model=\"legalEntity\" required />\n      </div>\n      <div>\n        <label for=\"netMineralAcres\">Net Mineral Acres:</label>\n        <input type=\"number\" v-model=\"netMineralAcres\" required />\n      </div>\n      <div>\n        <label for=\"mineralOwnerRoyalty\">Mineral Owner Royalty (%):</label>\n        <input type=\"number\" v-model=\"mineralOwnerRoyalty\" required />\n      </div>\n      <div>\n        <label for=\"sectionName\">Section Name:</label>\n        <input type=\"text\" v-model=\"sectionName\" required />\n      </div>\n      <div>\n        <label for=\"section\">Section:</label>\n        <input type=\"text\" v-model=\"section\" required />\n      </div>\n      <div>\n        <label for=\"township\">Township:</label>\n        <input type=\"text\" v-model=\"township\" required />\n      </div>\n      <div>\n        <label for=\"range\">Range:</label>\n        <input type=\"text\" v-model=\"range\" required />\n      </div>\n      <div>\n        <label for=\"titleSource\">Title Source:</label>\n        <select v-model=\"titleSource\" required>\n          <option value=\"Class A\">Class A</option>\n          <option value=\"Class B\">Class B</option>\n          <option value=\"Class C\">Class C</option>\n          <option value=\"Class D\">Class D</option>\n        </select>\n      </div>\n      <button type=\"submit\">Create Land Holding</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'OwnerDetails',\n  data() {\n    return {\n      owner: {}, // Initialize as empty object\n      landHoldings: [], // Initialize as empty array\n      legalEntity: '',\n      netMineralAcres: '',\n      mineralOwnerRoyalty: '',\n      sectionName: '',\n      section: '',\n      township: '',\n      range: '',\n      titleSource: '',\n    };\n  },\n  async created() {\n    try {\n      const ownerId = this.$route.params.id;\n      \n      // Fetch the owner details\n      const ownerResponse = await axios.get(`http://localhost:5001/api/owners/${ownerId}`, {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`,\n        },\n      });\n      this.owner = ownerResponse.data;\n\n      // Fetch the land holdings for this owner\n      const holdingsResponse = await axios.get(`http://localhost:5001/api/landholdings?owner=${ownerId}`, {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`,\n        },\n      });\n      this.landHoldings = holdingsResponse.data;\n    } catch (error) {\n      console.error('Failed to fetch owner or land holdings:', error);\n      this.$router.push('/dashboard');\n    }\n  },\n  methods: {\n    async createLandHolding() {\n      try {\n        const ownerId = this.$route.params.id;\n        const response = await axios.post(\n          'http://localhost:5001/api/landholdings',\n          {\n            name: `${this.sectionName}-${this.legalEntity}`, // Use a combination for name\n            owner: ownerId,\n            legalEntity: this.legalEntity,\n            netMineralAcres: this.netMineralAcres,\n            mineralOwnerRoyalty: this.mineralOwnerRoyalty,\n            sectionName: this.sectionName,\n            section: this.section,\n            township: this.township,\n            range: this.range,\n            titleSource: this.titleSource,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$store.state.token}`,\n            },\n          }\n        );\n        this.landHoldings.push(response.data);\n        // Clear form fields after submission\n        this.legalEntity = '';\n        this.netMineralAcres = '';\n        this.mineralOwnerRoyalty = '';\n        this.sectionName = '';\n        this.section = '';\n        this.township = '';\n        this.range = '';\n        this.titleSource = '';\n      } catch (error) {\n        console.error('Failed to create land holding:', error);\n        alert('Failed to create land holding.');\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":"AAwDA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,KAAA;MAAA;MACAC,YAAA;MAAA;MACAC,WAAA;MACAC,eAAA;MACAC,mBAAA;MACAC,WAAA;MACAC,OAAA;MACAC,QAAA;MACAC,KAAA;MACAC,WAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA;MACA,MAAAC,OAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA;;MAEA;MACA,MAAAC,aAAA,SAAAlB,KAAA,CAAAmB,GAAA,qCAAAL,OAAA;QACAM,OAAA;UACAC,aAAA,iBAAAC,MAAA,CAAAC,KAAA,CAAAC,KAAA;QACA;MACA;MACA,KAAArB,KAAA,GAAAe,aAAA,CAAAhB,IAAA;;MAEA;MACA,MAAAuB,gBAAA,SAAAzB,KAAA,CAAAmB,GAAA,iDAAAL,OAAA;QACAM,OAAA;UACAC,aAAA,iBAAAC,MAAA,CAAAC,KAAA,CAAAC,KAAA;QACA;MACA;MACA,KAAApB,YAAA,GAAAqB,gBAAA,CAAAvB,IAAA;IACA,SAAAwB,KAAA;MACAC,OAAA,CAAAD,KAAA,4CAAAA,KAAA;MACA,KAAAE,OAAA,CAAAC,IAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,kBAAA;MACA;QACA,MAAAjB,OAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA;QACA,MAAAe,QAAA,SAAAhC,KAAA,CAAAiC,IAAA,CACA,0CACA;UACAhC,IAAA,UAAAO,WAAA,SAAAH,WAAA;UAAA;UACAF,KAAA,EAAAW,OAAA;UACAT,WAAA,OAAAA,WAAA;UACAC,eAAA,OAAAA,eAAA;UACAC,mBAAA,OAAAA,mBAAA;UACAC,WAAA,OAAAA,WAAA;UACAC,OAAA,OAAAA,OAAA;UACAC,QAAA,OAAAA,QAAA;UACAC,KAAA,OAAAA,KAAA;UACAC,WAAA,OAAAA;QACA,GACA;UACAQ,OAAA;YACAC,aAAA,iBAAAC,MAAA,CAAAC,KAAA,CAAAC,KAAA;UACA;QACA,CACA;QACA,KAAApB,YAAA,CAAAyB,IAAA,CAAAG,QAAA,CAAA9B,IAAA;QACA;QACA,KAAAG,WAAA;QACA,KAAAC,eAAA;QACA,KAAAC,mBAAA;QACA,KAAAC,WAAA;QACA,KAAAC,OAAA;QACA,KAAAC,QAAA;QACA,KAAAC,KAAA;QACA,KAAAC,WAAA;MACA,SAAAc,KAAA;QACAC,OAAA,CAAAD,KAAA,mCAAAA,KAAA;QACAQ,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}