{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'Dashboard',\n  data() {\n    return {\n      owners: [],\n      ownerName: '',\n      entityType: 'Company',\n      ownerType: 'Competitor',\n      address: '',\n      file: null\n    };\n  },\n  async created() {\n    try {\n      const response = await axios.get('http://localhost:5001/api/owners', {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`\n        }\n      });\n      this.owners = response.data;\n    } catch (error) {\n      console.error('Failed to fetch owners:', error);\n      this.$router.push('/');\n    }\n  },\n  methods: {\n    async createOwner() {\n      try {\n        const response = await axios.post('http://localhost:5001/api/owners', {\n          ownerName: this.ownerName,\n          entityType: this.entityType,\n          ownerType: this.ownerType,\n          address: this.address\n        }, {\n          headers: {\n            Authorization: `Bearer ${this.$store.state.token}`\n          }\n        });\n        this.owners.push(response.data);\n        this.ownerName = '';\n        this.entityType = 'Company';\n        this.ownerType = 'Competitor';\n        this.address = '';\n      } catch (error) {\n        console.error('Failed to create owner:', error);\n        alert('Failed to create owner.');\n      }\n    },\n    async deleteOwner(ownerId) {\n      try {\n        await axios.delete(`http://localhost:5001/api/owners/${ownerId}`, {\n          headers: {\n            Authorization: `Bearer ${this.$store.state.token}`\n          }\n        });\n        this.owners = this.owners.filter(owner => owner._id !== ownerId);\n      } catch (error) {\n        console.error('Failed to delete owner:', error);\n        alert('Failed to delete owner.');\n      }\n    },\n    handleFileChange(event) {\n      this.file = event.target.files[0];\n    },\n    async uploadFile() {\n      if (!this.file) {\n        alert('Please select a file to upload.');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('file', this.file);\n      try {\n        await axios.post('http://localhost:5001/api/upload', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            Authorization: `Bearer ${this.$store.state.token}`\n          }\n        });\n        alert('File uploaded successfully.');\n        this.file = null; // Clear the file input after upload\n      } catch (error) {\n        console.error('Failed to upload file:', error);\n        alert('Failed to upload file.');\n      }\n    },\n    logout() {\n      this.$store.dispatch('logout');\n      this.$router.push('/');\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","owners","ownerName","entityType","ownerType","address","file","created","response","get","headers","Authorization","$store","state","token","error","console","$router","push","methods","createOwner","post","alert","deleteOwner","ownerId","delete","filter","owner","_id","handleFileChange","event","target","files","uploadFile","formData","FormData","append","logout","dispatch"],"sources":["src/views/Dashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <h2>Dashboard</h2>\n    <button @click=\"logout\">Logout</button>\n    \n    <!-- Owners List -->\n    <div v-if=\"owners.length > 0\">\n      <h3>Owners</h3>\n      <ul>\n        <li v-for=\"owner in owners\" :key=\"owner._id\">\n          <router-link :to=\"'/owner/' + owner._id\">{{ owner.ownerName }}</router-link>\n          <!-- Delete Button -->\n          <button @click=\"deleteOwner(owner._id)\">Delete</button>\n        </li>\n      </ul>\n    </div>\n    \n    <!-- Create Owner Form -->\n    <form @submit.prevent=\"createOwner\">\n      <h3>Create New Owner</h3>\n      <div>\n        <label for=\"ownerName\">Owner Name:</label>\n        <input type=\"text\" v-model=\"ownerName\" required />\n      </div>\n      <div>\n        <label for=\"entityType\">Entity Type:</label>\n        <select v-model=\"entityType\" required>\n          <option value=\"Company\">Company</option>\n          <option value=\"Individual\">Individual</option>\n          <option value=\"Investor\">Investor</option>\n          <option value=\"Trust\">Trust</option>\n        </select>\n      </div>\n      <div>\n        <label for=\"ownerType\">Owner Type:</label>\n        <select v-model=\"ownerType\" required>\n          <option value=\"Competitor\">Competitor</option>\n          <option value=\"Seller\">Seller</option>\n          <option value=\"Investor\">Investor</option>\n          <option value=\"Professional\">Professional</option>\n        </select>\n      </div>\n      <div>\n        <label for=\"address\">Address:</label>\n        <input type=\"text\" v-model=\"address\" required />\n      </div>\n      <button type=\"submit\">Create Owner</button>\n    </form>\n\n    <!-- File Upload Form -->\n    <form @submit.prevent=\"uploadFile\">\n      <h3>Upload File</h3>\n      <input type=\"file\" @change=\"handleFileChange\" />\n      <button type=\"submit\">Upload File</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'Dashboard',\n  data() {\n    return {\n      owners: [],\n      ownerName: '',\n      entityType: 'Company',\n      ownerType: 'Competitor',\n      address: '',\n      file: null,\n    };\n  },\n  async created() {\n    try {\n      const response = await axios.get('http://localhost:5001/api/owners', {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`,\n        },\n      });\n      this.owners = response.data;\n    } catch (error) {\n      console.error('Failed to fetch owners:', error);\n      this.$router.push('/');\n    }\n  },\n  methods: {\n    async createOwner() {\n      try {\n        const response = await axios.post(\n          'http://localhost:5001/api/owners',\n          {\n            ownerName: this.ownerName,\n            entityType: this.entityType,\n            ownerType: this.ownerType,\n            address: this.address,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${this.$store.state.token}`,\n            },\n          }\n        );\n        this.owners.push(response.data);\n        this.ownerName = '';\n        this.entityType = 'Company';\n        this.ownerType = 'Competitor';\n        this.address = '';\n      } catch (error) {\n        console.error('Failed to create owner:', error);\n        alert('Failed to create owner.');\n      }\n    },\n    async deleteOwner(ownerId) {\n      try {\n        await axios.delete(`http://localhost:5001/api/owners/${ownerId}`, {\n          headers: {\n            Authorization: `Bearer ${this.$store.state.token}`,\n          },\n        });\n        this.owners = this.owners.filter(owner => owner._id !== ownerId);\n      } catch (error) {\n        console.error('Failed to delete owner:', error);\n        alert('Failed to delete owner.');\n      }\n    },\n    handleFileChange(event) {\n      this.file = event.target.files[0];\n    },\n    async uploadFile() {\n      if (!this.file) {\n        alert('Please select a file to upload.');\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append('file', this.file);\n\n      try {\n        await axios.post('http://localhost:5001/api/upload', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            Authorization: `Bearer ${this.$store.state.token}`,\n          },\n        });\n        alert('File uploaded successfully.');\n        this.file = null; // Clear the file input after upload\n      } catch (error) {\n        console.error('Failed to upload file:', error);\n        alert('Failed to upload file.');\n      }\n    },\n    logout() {\n      this.$store.dispatch('logout');\n      this.$router.push('/');\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":"AA2DA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,SAAA;MACAC,UAAA;MACAC,SAAA;MACAC,OAAA;MACAC,IAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA;MACA,MAAAC,QAAA,SAAAV,KAAA,CAAAW,GAAA;QACAC,OAAA;UACAC,aAAA,iBAAAC,MAAA,CAAAC,KAAA,CAAAC,KAAA;QACA;MACA;MACA,KAAAb,MAAA,GAAAO,QAAA,CAAAR,IAAA;IACA,SAAAe,KAAA;MACAC,OAAA,CAAAD,KAAA,4BAAAA,KAAA;MACA,KAAAE,OAAA,CAAAC,IAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,YAAA;MACA;QACA,MAAAZ,QAAA,SAAAV,KAAA,CAAAuB,IAAA,CACA,oCACA;UACAnB,SAAA,OAAAA,SAAA;UACAC,UAAA,OAAAA,UAAA;UACAC,SAAA,OAAAA,SAAA;UACAC,OAAA,OAAAA;QACA,GACA;UACAK,OAAA;YACAC,aAAA,iBAAAC,MAAA,CAAAC,KAAA,CAAAC,KAAA;UACA;QACA,CACA;QACA,KAAAb,MAAA,CAAAiB,IAAA,CAAAV,QAAA,CAAAR,IAAA;QACA,KAAAE,SAAA;QACA,KAAAC,UAAA;QACA,KAAAC,SAAA;QACA,KAAAC,OAAA;MACA,SAAAU,KAAA;QACAC,OAAA,CAAAD,KAAA,4BAAAA,KAAA;QACAO,KAAA;MACA;IACA;IACA,MAAAC,YAAAC,OAAA;MACA;QACA,MAAA1B,KAAA,CAAA2B,MAAA,qCAAAD,OAAA;UACAd,OAAA;YACAC,aAAA,iBAAAC,MAAA,CAAAC,KAAA,CAAAC,KAAA;UACA;QACA;QACA,KAAAb,MAAA,QAAAA,MAAA,CAAAyB,MAAA,CAAAC,KAAA,IAAAA,KAAA,CAAAC,GAAA,KAAAJ,OAAA;MACA,SAAAT,KAAA;QACAC,OAAA,CAAAD,KAAA,4BAAAA,KAAA;QACAO,KAAA;MACA;IACA;IACAO,iBAAAC,KAAA;MACA,KAAAxB,IAAA,GAAAwB,KAAA,CAAAC,MAAA,CAAAC,KAAA;IACA;IACA,MAAAC,WAAA;MACA,UAAA3B,IAAA;QACAgB,KAAA;QACA;MACA;MAEA,MAAAY,QAAA,OAAAC,QAAA;MACAD,QAAA,CAAAE,MAAA,cAAA9B,IAAA;MAEA;QACA,MAAAR,KAAA,CAAAuB,IAAA,qCAAAa,QAAA;UACAxB,OAAA;YACA;YACAC,aAAA,iBAAAC,MAAA,CAAAC,KAAA,CAAAC,KAAA;UACA;QACA;QACAQ,KAAA;QACA,KAAAhB,IAAA;MACA,SAAAS,KAAA;QACAC,OAAA,CAAAD,KAAA,2BAAAA,KAAA;QACAO,KAAA;MACA;IACA;IACAe,OAAA;MACA,KAAAzB,MAAA,CAAA0B,QAAA;MACA,KAAArB,OAAA,CAAAC,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}