{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'Dashboard',\n  data() {\n    return {\n      owners: [],\n      ownerId: null,\n      ownerName: '',\n      entityType: 'Company',\n      ownerType: 'Competitor',\n      address: '',\n      isEditing: false // Track if we are in edit mode\n    };\n  },\n  async created() {\n    try {\n      const response = await axios.get('http://localhost:5001/api/owners', {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`\n        }\n      });\n      this.owners = response.data;\n    } catch (error) {\n      console.error('Failed to fetch owners:', error);\n      this.$router.push('/');\n    }\n  },\n  methods: {\n    async saveOwner() {\n      try {\n        if (this.isEditing) {\n          // Update existing owner\n          const response = await axios.put(`http://localhost:5001/api/owners/${this.ownerId}`, {\n            ownerName: this.ownerName,\n            entityType: this.entityType,\n            ownerType: this.ownerType,\n            address: this.address\n          }, {\n            headers: {\n              Authorization: `Bearer ${this.$store.state.token}`\n            }\n          });\n          // Update owner in the list\n          const index = this.owners.findIndex(owner => owner._id === this.ownerId);\n          this.$set(this.owners, index, response.data);\n        } else {\n          // Create new owner\n          const response = await axios.post('http://localhost:5001/api/owners', {\n            ownerName: this.ownerName,\n            entityType: this.entityType,\n            ownerType: this.ownerType,\n            address: this.address\n          }, {\n            headers: {\n              Authorization: `Bearer ${this.$store.state.token}`\n            }\n          });\n          this.owners.push(response.data);\n        }\n        // Clear form fields\n        this.resetForm();\n      } catch (error) {\n        console.error(this.isEditing ? 'Failed to update owner' : 'Failed to create owner', error);\n        alert(this.isEditing ? 'Failed to update owner.' : 'Failed to create owner.');\n      }\n    },\n    editOwner(owner) {\n      // Populate the form with the selected owner's data\n      this.ownerId = owner._id;\n      this.ownerName = owner.ownerName;\n      this.entityType = owner.entityType;\n      this.ownerType = owner.ownerType;\n      this.address = owner.address;\n      this.isEditing = true;\n    },\n    async deleteOwner(ownerId) {\n      try {\n        await axios.delete(`http://localhost:5001/api/owners/${ownerId}`, {\n          headers: {\n            Authorization: `Bearer ${this.$store.state.token}`\n          }\n        });\n        this.owners = this.owners.filter(owner => owner._id !== ownerId);\n      } catch (error) {\n        console.error('Failed to delete owner:', error);\n        alert('Failed to delete owner.');\n      }\n    },\n    cancelEdit() {\n      this.resetForm();\n    },\n    resetForm() {\n      // Clear form fields\n      this.ownerId = null;\n      this.ownerName = '';\n      this.entityType = 'Company';\n      this.ownerType = 'Competitor';\n      this.address = '';\n      this.isEditing = false;\n    },\n    logout() {\n      this.$store.dispatch('logout');\n      this.$router.push('/');\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","owners","ownerId","ownerName","entityType","ownerType","address","isEditing","created","response","get","headers","Authorization","$store","state","token","error","console","$router","push","methods","saveOwner","put","index","findIndex","owner","_id","$set","post","resetForm","alert","editOwner","deleteOwner","delete","filter","cancelEdit","logout","dispatch"],"sources":["src/views/Dashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <h2>Dashboard</h2>\n    <button @click=\"logout\">Logout</button>\n\n    <!-- Owners List -->\n    <div v-if=\"owners.length > 0\">\n      <h3>Owners</h3>\n      <ul>\n        <li v-for=\"owner in owners\" :key=\"owner._id\">\n          <router-link :to=\"'/owner/' + owner._id\">{{ owner.ownerName }}</router-link>\n          <!-- Edit Button -->\n          <button @click=\"editOwner(owner)\">Edit</button>\n          <!-- Delete Button -->\n          <button @click=\"deleteOwner(owner._id)\">Delete</button>\n        </li>\n      </ul>\n    </div>\n\n    <!-- Create/Update Owner Form -->\n    <form @submit.prevent=\"saveOwner\">\n      <h3>{{ isEditing ? 'Update' : 'Create' }} Owner</h3>\n      <div>\n        <label for=\"ownerName\">Owner Name:</label>\n        <input type=\"text\" v-model=\"ownerName\" required />\n      </div>\n      <div>\n        <label for=\"entityType\">Entity Type:</label>\n        <select v-model=\"entityType\" required>\n          <option value=\"Company\">Company</option>\n          <option value=\"Individual\">Individual</option>\n          <option value=\"Investor\">Investor</option>\n          <option value=\"Trust\">Trust</option>\n        </select>\n      </div>\n      <div>\n        <label for=\"ownerType\">Owner Type:</label>\n        <select v-model=\"ownerType\" required>\n          <option value=\"Competitor\">Competitor</option>\n          <option value=\"Seller\">Seller</option>\n          <option value=\"Investor\">Investor</option>\n          <option value=\"Professional\">Professional</option>\n        </select>\n      </div>\n      <div>\n        <label for=\"address\">Address:</label>\n        <input type=\"text\" v-model=\"address\" required />\n      </div>\n      <button type=\"submit\">{{ isEditing ? 'Update' : 'Create' }} Owner</button>\n      <button v-if=\"isEditing\" @click=\"cancelEdit\">Cancel</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'Dashboard',\n  data() {\n    return {\n      owners: [],\n      ownerId: null,\n      ownerName: '',\n      entityType: 'Company',\n      ownerType: 'Competitor',\n      address: '',\n      isEditing: false, // Track if we are in edit mode\n    };\n  },\n  async created() {\n    try {\n      const response = await axios.get('http://localhost:5001/api/owners', {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`,\n        },\n      });\n      this.owners = response.data;\n    } catch (error) {\n      console.error('Failed to fetch owners:', error);\n      this.$router.push('/');\n    }\n  },\n  methods: {\n    async saveOwner() {\n      try {\n        if (this.isEditing) {\n          // Update existing owner\n          const response = await axios.put(\n            `http://localhost:5001/api/owners/${this.ownerId}`,\n            {\n              ownerName: this.ownerName,\n              entityType: this.entityType,\n              ownerType: this.ownerType,\n              address: this.address,\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${this.$store.state.token}`,\n              },\n            }\n          );\n          // Update owner in the list\n          const index = this.owners.findIndex(owner => owner._id === this.ownerId);\n          this.$set(this.owners, index, response.data);\n        } else {\n          // Create new owner\n          const response = await axios.post(\n            'http://localhost:5001/api/owners',\n            {\n              ownerName: this.ownerName,\n              entityType: this.entityType,\n              ownerType: this.ownerType,\n              address: this.address,\n            },\n            {\n              headers: {\n                Authorization: `Bearer ${this.$store.state.token}`,\n              },\n            }\n          );\n          this.owners.push(response.data);\n        }\n        // Clear form fields\n        this.resetForm();\n      } catch (error) {\n        console.error(this.isEditing ? 'Failed to update owner' : 'Failed to create owner', error);\n        alert(this.isEditing ? 'Failed to update owner.' : 'Failed to create owner.');\n      }\n    },\n    editOwner(owner) {\n      // Populate the form with the selected owner's data\n      this.ownerId = owner._id;\n      this.ownerName = owner.ownerName;\n      this.entityType = owner.entityType;\n      this.ownerType = owner.ownerType;\n      this.address = owner.address;\n      this.isEditing = true;\n    },\n    async deleteOwner(ownerId) {\n      try {\n        await axios.delete(`http://localhost:5001/api/owners/${ownerId}`, {\n          headers: {\n            Authorization: `Bearer ${this.$store.state.token}`,\n          },\n        });\n        this.owners = this.owners.filter(owner => owner._id !== ownerId);\n      } catch (error) {\n        console.error('Failed to delete owner:', error);\n        alert('Failed to delete owner.');\n      }\n    },\n    cancelEdit() {\n      this.resetForm();\n    },\n    resetForm() {\n      // Clear form fields\n      this.ownerId = null;\n      this.ownerName = '';\n      this.entityType = 'Company';\n      this.ownerType = 'Competitor';\n      this.address = '';\n      this.isEditing = false;\n    },\n    logout() {\n      this.$store.dispatch('logout');\n      this.$router.push('/');\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":"AAuDA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,OAAA;MACAC,SAAA;MACAC,UAAA;MACAC,SAAA;MACAC,OAAA;MACAC,SAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA;MACA,MAAAC,QAAA,SAAAX,KAAA,CAAAY,GAAA;QACAC,OAAA;UACAC,aAAA,iBAAAC,MAAA,CAAAC,KAAA,CAAAC,KAAA;QACA;MACA;MACA,KAAAd,MAAA,GAAAQ,QAAA,CAAAT,IAAA;IACA,SAAAgB,KAAA;MACAC,OAAA,CAAAD,KAAA,4BAAAA,KAAA;MACA,KAAAE,OAAA,CAAAC,IAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,UAAA;MACA;QACA,SAAAd,SAAA;UACA;UACA,MAAAE,QAAA,SAAAX,KAAA,CAAAwB,GAAA,CACA,yCAAApB,OAAA,IACA;YACAC,SAAA,OAAAA,SAAA;YACAC,UAAA,OAAAA,UAAA;YACAC,SAAA,OAAAA,SAAA;YACAC,OAAA,OAAAA;UACA,GACA;YACAK,OAAA;cACAC,aAAA,iBAAAC,MAAA,CAAAC,KAAA,CAAAC,KAAA;YACA;UACA,CACA;UACA;UACA,MAAAQ,KAAA,QAAAtB,MAAA,CAAAuB,SAAA,CAAAC,KAAA,IAAAA,KAAA,CAAAC,GAAA,UAAAxB,OAAA;UACA,KAAAyB,IAAA,MAAA1B,MAAA,EAAAsB,KAAA,EAAAd,QAAA,CAAAT,IAAA;QACA;UACA;UACA,MAAAS,QAAA,SAAAX,KAAA,CAAA8B,IAAA,CACA,oCACA;YACAzB,SAAA,OAAAA,SAAA;YACAC,UAAA,OAAAA,UAAA;YACAC,SAAA,OAAAA,SAAA;YACAC,OAAA,OAAAA;UACA,GACA;YACAK,OAAA;cACAC,aAAA,iBAAAC,MAAA,CAAAC,KAAA,CAAAC,KAAA;YACA;UACA,CACA;UACA,KAAAd,MAAA,CAAAkB,IAAA,CAAAV,QAAA,CAAAT,IAAA;QACA;QACA;QACA,KAAA6B,SAAA;MACA,SAAAb,KAAA;QACAC,OAAA,CAAAD,KAAA,MAAAT,SAAA,wDAAAS,KAAA;QACAc,KAAA,MAAAvB,SAAA;MACA;IACA;IACAwB,UAAAN,KAAA;MACA;MACA,KAAAvB,OAAA,GAAAuB,KAAA,CAAAC,GAAA;MACA,KAAAvB,SAAA,GAAAsB,KAAA,CAAAtB,SAAA;MACA,KAAAC,UAAA,GAAAqB,KAAA,CAAArB,UAAA;MACA,KAAAC,SAAA,GAAAoB,KAAA,CAAApB,SAAA;MACA,KAAAC,OAAA,GAAAmB,KAAA,CAAAnB,OAAA;MACA,KAAAC,SAAA;IACA;IACA,MAAAyB,YAAA9B,OAAA;MACA;QACA,MAAAJ,KAAA,CAAAmC,MAAA,qCAAA/B,OAAA;UACAS,OAAA;YACAC,aAAA,iBAAAC,MAAA,CAAAC,KAAA,CAAAC,KAAA;UACA;QACA;QACA,KAAAd,MAAA,QAAAA,MAAA,CAAAiC,MAAA,CAAAT,KAAA,IAAAA,KAAA,CAAAC,GAAA,KAAAxB,OAAA;MACA,SAAAc,KAAA;QACAC,OAAA,CAAAD,KAAA,4BAAAA,KAAA;QACAc,KAAA;MACA;IACA;IACAK,WAAA;MACA,KAAAN,SAAA;IACA;IACAA,UAAA;MACA;MACA,KAAA3B,OAAA;MACA,KAAAC,SAAA;MACA,KAAAC,UAAA;MACA,KAAAC,SAAA;MACA,KAAAC,OAAA;MACA,KAAAC,SAAA;IACA;IACA6B,OAAA;MACA,KAAAvB,MAAA,CAAAwB,QAAA;MACA,KAAAnB,OAAA,CAAAC,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}