{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'OwnerDetails',\n  data() {\n    return {\n      owner: {},\n      // Initialize as empty object\n      landHoldings: [],\n      // Initialize as empty array\n      legalEntity: '',\n      netMineralAcres: '',\n      mineralOwnerRoyalty: '',\n      sectionName: '',\n      section: '',\n      township: '',\n      range: '',\n      titleSource: '',\n      file: null // File data\n    };\n  },\n  async created() {\n    try {\n      const ownerId = this.$route.params.id;\n\n      // Fetch the owner details\n      const ownerResponse = await axios.get(`https://master--tourmaline-praline-8590d5.netlify.app:5001/api/owners/${ownerId}`, {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`\n        }\n      });\n      this.owner = ownerResponse.data;\n\n      // Fetch the land holdings for this owner\n      const holdingsResponse = await axios.get(`https://master--tourmaline-praline-8590d5.netlify.app:5001/api/landholdings?owner=${ownerId}`, {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`\n        }\n      });\n      this.landHoldings = holdingsResponse.data;\n    } catch (error) {\n      console.error('Failed to fetch owner or land holdings:', error);\n      this.$router.push('/dashboard');\n    }\n  },\n  methods: {\n    handleFileUpload(event) {\n      this.file = event.target.files[0];\n    },\n    async createLandHolding() {\n      try {\n        const ownerId = this.$route.params.id;\n        const formData = new FormData();\n        formData.append('name', `${this.sectionName}-${this.legalEntity}`); // Use a combination for name\n        formData.append('owner', ownerId);\n        formData.append('legalEntity', this.legalEntity);\n        formData.append('netMineralAcres', this.netMineralAcres);\n        formData.append('mineralOwnerRoyalty', this.mineralOwnerRoyalty);\n        formData.append('sectionName', this.sectionName);\n        formData.append('section', this.section);\n        formData.append('township', this.township);\n        formData.append('range', this.range);\n        formData.append('titleSource', this.titleSource);\n        if (this.file) {\n          formData.append('file', this.file);\n        }\n        const response = await axios.post('https://master--tourmaline-praline-8590d5.netlify.app:5001/api/landholdings', formData, {\n          headers: {\n            Authorization: `Bearer ${this.$store.state.token}`,\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        this.landHoldings.push(response.data);\n        // Clear form fields after submission\n        this.resetForm();\n      } catch (error) {\n        console.error('Failed to create land holding:', error);\n        alert('Failed to create land holding.');\n      }\n    },\n    async deleteLandHolding(holdingId) {\n      try {\n        await axios.delete(`https://master--tourmaline-praline-8590d5.netlify.app:5001/api/landholdings/${holdingId}`, {\n          headers: {\n            Authorization: `Bearer ${this.$store.state.token}`\n          }\n        });\n        this.landHoldings = this.landHoldings.filter(holding => holding._id !== holdingId);\n      } catch (error) {\n        console.error('Failed to delete land holding:', error);\n        alert('Failed to delete land holding.');\n      }\n    },\n    resetForm() {\n      this.legalEntity = '';\n      this.netMineralAcres = '';\n      this.mineralOwnerRoyalty = '';\n      this.sectionName = '';\n      this.section = '';\n      this.township = '';\n      this.range = '';\n      this.titleSource = '';\n      this.file = null;\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","owner","landHoldings","legalEntity","netMineralAcres","mineralOwnerRoyalty","sectionName","section","township","range","titleSource","file","created","ownerId","$route","params","id","ownerResponse","get","headers","Authorization","$store","state","token","holdingsResponse","error","console","$router","push","methods","handleFileUpload","event","target","files","createLandHolding","formData","FormData","append","response","post","resetForm","alert","deleteLandHolding","holdingId","delete","filter","holding","_id"],"sources":["src/views/OwnerDetails.vue"],"sourcesContent":["<template>\n  <div class=\"owner-details\">\n    <h2>{{ owner.ownerName }}</h2>\n    <p>Address: {{ owner.address }}</p>\n\n    <!-- Land Holdings List -->\n    <h3>Land Holdings</h3>\n    <ul>\n      <li v-for=\"holding in landHoldings\" :key=\"holding._id\">\n        <router-link :to=\"'/landholding/' + holding._id\">\n          {{ holding.name }} - {{ holding.legalEntity }}\n        </router-link>\n        <!-- Delete Button -->\n        <button @click=\"deleteLandHolding(holding._id)\">Delete</button>\n      </li>\n    </ul>\n\n    <!-- Create Land Holding Form -->\n    <form @submit.prevent=\"createLandHolding\">\n      <h3>Create New Land Holding</h3>\n      <div>\n        <label for=\"legalEntity\">Legal Entity:</label>\n        <input type=\"text\" v-model=\"legalEntity\" required />\n      </div>\n      <div>\n        <label for=\"netMineralAcres\">Net Mineral Acres:</label>\n        <input type=\"number\" v-model=\"netMineralAcres\" required />\n      </div>\n      <div>\n        <label for=\"mineralOwnerRoyalty\">Mineral Owner Royalty (%):</label>\n        <input type=\"number\" v-model=\"mineralOwnerRoyalty\" required />\n      </div>\n      <div>\n        <label for=\"sectionName\">Section Name:</label>\n        <input type=\"text\" v-model=\"sectionName\" required />\n      </div>\n      <div>\n        <label for=\"section\">Section:</label>\n        <input type=\"text\" v-model=\"section\" required />\n      </div>\n      <div>\n        <label for=\"township\">Township:</label>\n        <input type=\"text\" v-model=\"township\" required />\n      </div>\n      <div>\n        <label for=\"range\">Range:</label>\n        <input type=\"text\" v-model=\"range\" required />\n      </div>\n      <div>\n        <label for=\"titleSource\">Title Source:</label>\n        <select v-model=\"titleSource\" required>\n          <option value=\"Class A\">Class A</option>\n          <option value=\"Class B\">Class B</option>\n          <option value=\"Class C\">Class C</option>\n          <option value=\"Class D\">Class D</option>\n        </select>\n      </div>\n      <div>\n        <label for=\"file\">Upload File:</label>\n        <input type=\"file\" @change=\"handleFileUpload\" />\n      </div>\n      <button type=\"submit\">Create Land Holding</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'OwnerDetails',\n  data() {\n    return {\n      owner: {}, // Initialize as empty object\n      landHoldings: [], // Initialize as empty array\n      legalEntity: '',\n      netMineralAcres: '',\n      mineralOwnerRoyalty: '',\n      sectionName: '',\n      section: '',\n      township: '',\n      range: '',\n      titleSource: '',\n      file: null, // File data\n    };\n  },\n  async created() {\n    try {\n      const ownerId = this.$route.params.id;\n\n      // Fetch the owner details\n      const ownerResponse = await axios.get(`https://master--tourmaline-praline-8590d5.netlify.app:5001/api/owners/${ownerId}`, {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`,\n        },\n      });\n      this.owner = ownerResponse.data;\n\n      // Fetch the land holdings for this owner\n      const holdingsResponse = await axios.get(`https://master--tourmaline-praline-8590d5.netlify.app:5001/api/landholdings?owner=${ownerId}`, {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`,\n        },\n      });\n      this.landHoldings = holdingsResponse.data;\n    } catch (error) {\n      console.error('Failed to fetch owner or land holdings:', error);\n      this.$router.push('/dashboard');\n    }\n  },\n  methods: {\n    handleFileUpload(event) {\n      this.file = event.target.files[0];\n    },\n    async createLandHolding() {\n      try {\n        const ownerId = this.$route.params.id;\n        const formData = new FormData();\n        formData.append('name', `${this.sectionName}-${this.legalEntity}`); // Use a combination for name\n        formData.append('owner', ownerId);\n        formData.append('legalEntity', this.legalEntity);\n        formData.append('netMineralAcres', this.netMineralAcres);\n        formData.append('mineralOwnerRoyalty', this.mineralOwnerRoyalty);\n        formData.append('sectionName', this.sectionName);\n        formData.append('section', this.section);\n        formData.append('township', this.township);\n        formData.append('range', this.range);\n        formData.append('titleSource', this.titleSource);\n        if (this.file) {\n          formData.append('file', this.file);\n        }\n\n        const response = await axios.post(\n          'https://master--tourmaline-praline-8590d5.netlify.app:5001/api/landholdings',\n          formData,\n          {\n            headers: {\n              Authorization: `Bearer ${this.$store.state.token}`,\n              'Content-Type': 'multipart/form-data',\n            },\n          }\n        );\n        this.landHoldings.push(response.data);\n        // Clear form fields after submission\n        this.resetForm();\n      } catch (error) {\n        console.error('Failed to create land holding:', error);\n        alert('Failed to create land holding.');\n      }\n    },\n    async deleteLandHolding(holdingId) {\n      try {\n        await axios.delete(`https://master--tourmaline-praline-8590d5.netlify.app:5001/api/landholdings/${holdingId}`, {\n          headers: {\n            Authorization: `Bearer ${this.$store.state.token}`,\n          },\n        });\n        this.landHoldings = this.landHoldings.filter((holding) => holding._id !== holdingId);\n      } catch (error) {\n        console.error('Failed to delete land holding:', error);\n        alert('Failed to delete land holding.');\n      }\n    },\n    resetForm() {\n      this.legalEntity = '';\n      this.netMineralAcres = '';\n      this.mineralOwnerRoyalty = '';\n      this.sectionName = '';\n      this.section = '';\n      this.township = '';\n      this.range = '';\n      this.titleSource = '';\n      this.file = null;\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}