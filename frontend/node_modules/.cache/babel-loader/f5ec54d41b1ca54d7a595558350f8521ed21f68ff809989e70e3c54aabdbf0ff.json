{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'Dashboard',\n  data() {\n    return {\n      owners: [],\n      ownerName: '',\n      entityType: 'Company',\n      ownerType: 'Competitor',\n      address: '',\n      file: null,\n      isEditing: false,\n      editOwnerId: null\n    };\n  },\n  async created() {\n    try {\n      const response = await axios.get('http://localhost:5001/api/owners', {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`\n        }\n      });\n      this.owners = response.data;\n    } catch (error) {\n      console.error('Failed to fetch owners:', error);\n      this.$router.push('/');\n    }\n  },\n  methods: {\n    handleFileUpload(event) {\n      this.file = event.target.files[0];\n    },\n    async saveOwner() {\n      try {\n        const formData = new FormData();\n        formData.append('ownerName', this.ownerName);\n        formData.append('entityType', this.entityType);\n        formData.append('ownerType', this.ownerType);\n        formData.append('address', this.address);\n        if (this.file) {\n          formData.append('file', this.file);\n        }\n        let response;\n        if (this.isEditing) {\n          response = await axios.put(`http://localhost:5001/api/owners/${this.editOwnerId}`, formData, {\n            headers: {\n              Authorization: `Bearer ${this.$store.state.token}`,\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n          const index = this.owners.findIndex(owner => owner._id === this.editOwnerId);\n          this.$set(this.owners, index, response.data);\n        } else {\n          response = await axios.post('http://localhost:5001/api/owners', formData, {\n            headers: {\n              Authorization: `Bearer ${this.$store.state.token}`,\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n          this.owners.push(response.data);\n        }\n        this.resetForm();\n      } catch (error) {\n        console.error(`Failed to ${this.isEditing ? 'update' : 'create'} owner:`, error);\n        alert(`Failed to ${this.isEditing ? 'update' : 'create'} owner.`);\n      }\n    },\n    async deleteOwner(ownerId) {\n      try {\n        await axios.delete(`http://localhost:5001/api/owners/${ownerId}`, {\n          headers: {\n            Authorization: `Bearer ${this.$store.state.token}`\n          }\n        });\n        this.owners = this.owners.filter(owner => owner._id !== ownerId);\n      } catch (error) {\n        console.error('Failed to delete owner:', error);\n        alert('Failed to delete owner.');\n      }\n    },\n    editOwner(owner) {\n      this.isEditing = true;\n      this.editOwnerId = owner._id;\n      this.ownerName = owner.ownerName;\n      this.entityType = owner.entityType;\n      this.ownerType = owner.ownerType;\n      this.address = owner.address;\n    },\n    cancelEdit() {\n      this.resetForm();\n    },\n    resetForm() {\n      this.ownerName = '';\n      this.entityType = 'Company';\n      this.ownerType = 'Competitor';\n      this.address = '';\n      this.file = null;\n      this.isEditing = false;\n      this.editOwnerId = null;\n    },\n    logout() {\n      this.$store.dispatch('logout');\n      this.$router.push('/');\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","owners","ownerName","entityType","ownerType","address","file","isEditing","editOwnerId","created","response","get","headers","Authorization","$store","state","token","error","console","$router","push","methods","handleFileUpload","event","target","files","saveOwner","formData","FormData","append","put","index","findIndex","owner","_id","$set","post","resetForm","alert","deleteOwner","ownerId","delete","filter","editOwner","cancelEdit","logout","dispatch"],"sources":["src/views/Dashboard.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <h2>Dashboard</h2>\n    <button @click=\"logout\">Logout</button>\n\n    <!-- Owners List -->\n    <div v-if=\"owners.length > 0\">\n      <h3>Owners</h3>\n      <ul>\n        <li v-for=\"owner in owners\" :key=\"owner._id\">\n          <router-link :to=\"'/owner/' + owner._id\">{{ owner.ownerName }}</router-link>\n          <!-- Delete Button -->\n          <button @click=\"deleteOwner(owner._id)\">Delete</button>\n          <!-- Update Button -->\n          <button @click=\"editOwner(owner)\">Edit</button>\n        </li>\n      </ul>\n    </div>\n\n    <!-- Create/Update Owner Form -->\n    <form @submit.prevent=\"saveOwner\">\n      <h3>{{ isEditing ? 'Update' : 'Create' }} Owner</h3>\n      <div>\n        <label for=\"ownerName\">Owner Name:</label>\n        <input type=\"text\" v-model=\"ownerName\" required />\n      </div>\n      <div>\n        <label for=\"entityType\">Entity Type:</label>\n        <select v-model=\"entityType\" required>\n          <option value=\"Company\">Company</option>\n          <option value=\"Individual\">Individual</option>\n          <option value=\"Investor\">Investor</option>\n          <option value=\"Trust\">Trust</option>\n        </select>\n      </div>\n      <div>\n        <label for=\"ownerType\">Owner Type:</label>\n        <select v-model=\"ownerType\" required>\n          <option value=\"Competitor\">Competitor</option>\n          <option value=\"Seller\">Seller</option>\n          <option value=\"Investor\">Investor</option>\n          <option value=\"Professional\">Professional</option>\n        </select>\n      </div>\n      <div>\n        <label for=\"address\">Address:</label>\n        <input type=\"text\" v-model=\"address\" required />\n      </div>\n      <div>\n        <label for=\"file\">Upload File:</label>\n        <input type=\"file\" @change=\"handleFileUpload\" />\n      </div>\n      <button type=\"submit\">{{ isEditing ? 'Update' : 'Create' }} Owner</button>\n      <button v-if=\"isEditing\" @click=\"cancelEdit\">Cancel</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'Dashboard',\n  data() {\n    return {\n      owners: [],\n      ownerName: '',\n      entityType: 'Company',\n      ownerType: 'Competitor',\n      address: '',\n      file: null,\n      isEditing: false,\n      editOwnerId: null,\n    };\n  },\n  async created() {\n    try {\n      const response = await axios.get('http://localhost:5001/api/owners', {\n        headers: {\n          Authorization: `Bearer ${this.$store.state.token}`,\n        },\n      });\n      this.owners = response.data;\n    } catch (error) {\n      console.error('Failed to fetch owners:', error);\n      this.$router.push('/');\n    }\n  },\n  methods: {\n    handleFileUpload(event) {\n      this.file = event.target.files[0];\n    },\n    async saveOwner() {\n      try {\n        const formData = new FormData();\n        formData.append('ownerName', this.ownerName);\n        formData.append('entityType', this.entityType);\n        formData.append('ownerType', this.ownerType);\n        formData.append('address', this.address);\n        if (this.file) {\n          formData.append('file', this.file);\n        }\n\n        let response;\n        if (this.isEditing) {\n          response = await axios.put(\n            `http://localhost:5001/api/owners/${this.editOwnerId}`,\n            formData,\n            {\n              headers: {\n                Authorization: `Bearer ${this.$store.state.token}`,\n                'Content-Type': 'multipart/form-data',\n              },\n            }\n          );\n          const index = this.owners.findIndex((owner) => owner._id === this.editOwnerId);\n          this.$set(this.owners, index, response.data);\n        } else {\n          response = await axios.post('http://localhost:5001/api/owners', formData, {\n            headers: {\n              Authorization: `Bearer ${this.$store.state.token}`,\n              'Content-Type': 'multipart/form-data',\n            },\n          });\n          this.owners.push(response.data);\n        }\n\n        this.resetForm();\n      } catch (error) {\n        console.error(`Failed to ${this.isEditing ? 'update' : 'create'} owner:`, error);\n        alert(`Failed to ${this.isEditing ? 'update' : 'create'} owner.`);\n      }\n    },\n    async deleteOwner(ownerId) {\n      try {\n        await axios.delete(`http://localhost:5001/api/owners/${ownerId}`, {\n          headers: {\n            Authorization: `Bearer ${this.$store.state.token}`,\n          },\n        });\n        this.owners = this.owners.filter((owner) => owner._id !== ownerId);\n      } catch (error) {\n        console.error('Failed to delete owner:', error);\n        alert('Failed to delete owner.');\n      }\n    },\n    editOwner(owner) {\n      this.isEditing = true;\n      this.editOwnerId = owner._id;\n      this.ownerName = owner.ownerName;\n      this.entityType = owner.entityType;\n      this.ownerType = owner.ownerType;\n      this.address = owner.address;\n    },\n    cancelEdit() {\n      this.resetForm();\n    },\n    resetForm() {\n      this.ownerName = '';\n      this.entityType = 'Company';\n      this.ownerType = 'Competitor';\n      this.address = '';\n      this.file = null;\n      this.isEditing = false;\n      this.editOwnerId = null;\n    },\n    logout() {\n      this.$store.dispatch('logout');\n      this.$router.push('/');\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}